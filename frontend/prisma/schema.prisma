// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @unique
  name            String
  avatarUrl       String?   @map("avatar_url")
  totalVolume     Int       @default(0) @map("total_volume")
  favoriteBeer    Beer?     @relation("UserFavoriteBeer", fields: [favoriteBeerID], references: [id])
  favoriteBeerID  String?   @map("favorite_beer_id") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  drinking        Drinking[]
  userMissions    UserMission[]
  snsConnections  SnsConnection[]
  printJobs       PrintJob[]

  @@map("users")
}

model BeerCategory {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category String
  icon     String?
  color    String?
  
  // Relations
  beers    Beer[]

  @@map("beer_category")
}

model Beer {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  beerType        String        @default("commercial") @map("beer_type")  // 'commercial' | 'restaurant'
  category        BeerCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?       @map("category_id") @db.Uuid
  alcoholContent  Decimal?      @map("alcohol_content") @db.Decimal(3, 1)
  brewery         String?       // 市販ビールの場合の醸造所名
  restaurant      Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId    String?       @map("restaurant_id") @db.Uuid
  price           Decimal?      @db.Decimal(10, 2)  // 値段
  country         String?
  description     String?
  imageUrl        String?       @map("image_url")
  untappdId       String?       @map("untappd_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relations
  drinking        Drinking[]
  favoriteUsers   User[]        @relation("UserFavoriteBeer")

  @@map("beer")
}

model RestaurantCategory {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category String
  icon     String?
  color    String?
  
  // Relations
  restaurants Restaurant[]

  @@map("restaurant_category")
}

model Restaurant {
  id         String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  category   RestaurantCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?             @map("category_id") @db.Uuid
  address    String?
  latitude   Decimal?            @db.Decimal(10, 8)
  longitude  Decimal?            @db.Decimal(11, 8)
  phone      String?
  website    String?
  imageUrl   String?             @map("image_url")
  createdAt  DateTime            @default(now()) @map("created_at")
  
  // Relations
  beers      Beer[]              // レストランが提供するビール
  drinking   Drinking[]

  @@map("restaurant")
}

model Drinking {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @map("user_id") @db.Uuid
  beer        Beer?       @relation(fields: [beerId], references: [id])
  beerId      String?     @map("beer_id") @db.Uuid
  restaurant  Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?    @map("restaurant_id") @db.Uuid
  amount      Int
  price       Decimal?    @db.Decimal(10, 2)
  time        DateTime
  text        String?
  rating      Int?        @db.SmallInt
  share       Boolean     @default(false)
  imageUrl    String?     @map("image_url")
  locationLat Decimal?    @map("location_lat") @db.Decimal(10, 8)
  locationLng Decimal?    @map("location_lng") @db.Decimal(11, 8)
  weather     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("drinking")
}

model News {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  content     String
  category    String
  imageUrl    String?   @map("image_url")
  publishedAt DateTime  @map("published_at")
  expiresAt   DateTime? @map("expires_at")
  priority    Int       @default(0)
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("news")
}

model Mission {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  description  String
  missionType  String    @map("mission_type")
  targetValue  Int       @map("target_value")
  rewardPoints Int       @default(0) @map("reward_points")
  rewardBadge  String?   @map("reward_badge")
  startDate    DateTime? @map("start_date")
  endDate      DateTime? @map("end_date")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  // Relations
  userMissions UserMission[]

  @@map("missions")
}

model UserMission {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id") @db.Uuid
  mission     Mission   @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId   String    @map("mission_id") @db.Uuid
  progress    Int       @default(0)
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([userId, missionId])
  @@map("user_missions")
}

model SnsConnection {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @map("user_id") @db.Uuid
  platform       String
  platformUserId String    @map("platform_user_id")
  accessToken    String?   @map("access_token")
  refreshToken   String?   @map("refresh_token")
  expiresAt      DateTime? @map("expires_at")
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@unique([userId, platform])
  @@map("sns_connections")
}

model PrintJob {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @map("user_id") @db.Uuid
  jobType     String    @map("job_type")
  data        Json
  status      String    @default("pending")
  printerId   String?   @map("printer_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  processedAt DateTime? @map("processed_at")

  @@map("print_jobs")
} 